/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SSEService_H
#define SSEService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "Server_types.h"

namespace server {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SSEServiceIf {
 public:
  virtual ~SSEServiceIf() {}
  virtual void add_entries(const std::string& key, const std::string& val, const int32_t flag) = 0;
  virtual void search(std::vector<int32_t> & _return, const int32_t st, const std::string& Kw, const std::vector<SerialisedNode> & node_list, const int32_t level) = 0;
  virtual void verify(std::vector<int32_t> & _return, const std::string& D, const std::string& Kw) = 0;
};

class SSEServiceIfFactory {
 public:
  typedef SSEServiceIf Handler;

  virtual ~SSEServiceIfFactory() {}

  virtual SSEServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SSEServiceIf* /* handler */) = 0;
};

class SSEServiceIfSingletonFactory : virtual public SSEServiceIfFactory {
 public:
  SSEServiceIfSingletonFactory(const ::std::shared_ptr<SSEServiceIf>& iface) : iface_(iface) {}
  virtual ~SSEServiceIfSingletonFactory() {}

  virtual SSEServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SSEServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<SSEServiceIf> iface_;
};

class SSEServiceNull : virtual public SSEServiceIf {
 public:
  virtual ~SSEServiceNull() {}
  void add_entries(const std::string& /* key */, const std::string& /* val */, const int32_t /* flag */) {
    return;
  }
  void search(std::vector<int32_t> & /* _return */, const int32_t /* st */, const std::string& /* Kw */, const std::vector<SerialisedNode> & /* node_list */, const int32_t /* level */) {
    return;
  }
  void verify(std::vector<int32_t> & /* _return */, const std::string& /* D */, const std::string& /* Kw */) {
    return;
  }
};

typedef struct _SSEService_add_entries_args__isset {
  _SSEService_add_entries_args__isset() : key(false), val(false), flag(false) {}
  bool key :1;
  bool val :1;
  bool flag :1;
} _SSEService_add_entries_args__isset;

class SSEService_add_entries_args {
 public:

  SSEService_add_entries_args(const SSEService_add_entries_args&);
  SSEService_add_entries_args& operator=(const SSEService_add_entries_args&);
  SSEService_add_entries_args() : key(), val(), flag(0) {
  }

  virtual ~SSEService_add_entries_args() noexcept;
  std::string key;
  std::string val;
  int32_t flag;

  _SSEService_add_entries_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_val(const std::string& val);

  void __set_flag(const int32_t val);

  bool operator == (const SSEService_add_entries_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(val == rhs.val))
      return false;
    if (!(flag == rhs.flag))
      return false;
    return true;
  }
  bool operator != (const SSEService_add_entries_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SSEService_add_entries_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SSEService_add_entries_pargs {
 public:


  virtual ~SSEService_add_entries_pargs() noexcept;
  const std::string* key;
  const std::string* val;
  const int32_t* flag;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SSEService_search_args__isset {
  _SSEService_search_args__isset() : st(false), Kw(false), node_list(false), level(false) {}
  bool st :1;
  bool Kw :1;
  bool node_list :1;
  bool level :1;
} _SSEService_search_args__isset;

class SSEService_search_args {
 public:

  SSEService_search_args(const SSEService_search_args&);
  SSEService_search_args& operator=(const SSEService_search_args&);
  SSEService_search_args() : st(0), Kw(), level(0) {
  }

  virtual ~SSEService_search_args() noexcept;
  int32_t st;
  std::string Kw;
  std::vector<SerialisedNode>  node_list;
  int32_t level;

  _SSEService_search_args__isset __isset;

  void __set_st(const int32_t val);

  void __set_Kw(const std::string& val);

  void __set_node_list(const std::vector<SerialisedNode> & val);

  void __set_level(const int32_t val);

  bool operator == (const SSEService_search_args & rhs) const
  {
    if (!(st == rhs.st))
      return false;
    if (!(Kw == rhs.Kw))
      return false;
    if (!(node_list == rhs.node_list))
      return false;
    if (!(level == rhs.level))
      return false;
    return true;
  }
  bool operator != (const SSEService_search_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SSEService_search_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SSEService_search_pargs {
 public:


  virtual ~SSEService_search_pargs() noexcept;
  const int32_t* st;
  const std::string* Kw;
  const std::vector<SerialisedNode> * node_list;
  const int32_t* level;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SSEService_search_result__isset {
  _SSEService_search_result__isset() : success(false) {}
  bool success :1;
} _SSEService_search_result__isset;

class SSEService_search_result {
 public:

  SSEService_search_result(const SSEService_search_result&);
  SSEService_search_result& operator=(const SSEService_search_result&);
  SSEService_search_result() {
  }

  virtual ~SSEService_search_result() noexcept;
  std::vector<int32_t>  success;

  _SSEService_search_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const SSEService_search_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SSEService_search_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SSEService_search_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SSEService_search_presult__isset {
  _SSEService_search_presult__isset() : success(false) {}
  bool success :1;
} _SSEService_search_presult__isset;

class SSEService_search_presult {
 public:


  virtual ~SSEService_search_presult() noexcept;
  std::vector<int32_t> * success;

  _SSEService_search_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SSEService_verify_args__isset {
  _SSEService_verify_args__isset() : D(false), Kw(false) {}
  bool D :1;
  bool Kw :1;
} _SSEService_verify_args__isset;

class SSEService_verify_args {
 public:

  SSEService_verify_args(const SSEService_verify_args&);
  SSEService_verify_args& operator=(const SSEService_verify_args&);
  SSEService_verify_args() : D(), Kw() {
  }

  virtual ~SSEService_verify_args() noexcept;
  std::string D;
  std::string Kw;

  _SSEService_verify_args__isset __isset;

  void __set_D(const std::string& val);

  void __set_Kw(const std::string& val);

  bool operator == (const SSEService_verify_args & rhs) const
  {
    if (!(D == rhs.D))
      return false;
    if (!(Kw == rhs.Kw))
      return false;
    return true;
  }
  bool operator != (const SSEService_verify_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SSEService_verify_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SSEService_verify_pargs {
 public:


  virtual ~SSEService_verify_pargs() noexcept;
  const std::string* D;
  const std::string* Kw;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SSEService_verify_result__isset {
  _SSEService_verify_result__isset() : success(false) {}
  bool success :1;
} _SSEService_verify_result__isset;

class SSEService_verify_result {
 public:

  SSEService_verify_result(const SSEService_verify_result&);
  SSEService_verify_result& operator=(const SSEService_verify_result&);
  SSEService_verify_result() {
  }

  virtual ~SSEService_verify_result() noexcept;
  std::vector<int32_t>  success;

  _SSEService_verify_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const SSEService_verify_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SSEService_verify_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SSEService_verify_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SSEService_verify_presult__isset {
  _SSEService_verify_presult__isset() : success(false) {}
  bool success :1;
} _SSEService_verify_presult__isset;

class SSEService_verify_presult {
 public:


  virtual ~SSEService_verify_presult() noexcept;
  std::vector<int32_t> * success;

  _SSEService_verify_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SSEServiceClient : virtual public SSEServiceIf {
 public:
  SSEServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SSEServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void add_entries(const std::string& key, const std::string& val, const int32_t flag);
  void send_add_entries(const std::string& key, const std::string& val, const int32_t flag);
  void search(std::vector<int32_t> & _return, const int32_t st, const std::string& Kw, const std::vector<SerialisedNode> & node_list, const int32_t level);
  void send_search(const int32_t st, const std::string& Kw, const std::vector<SerialisedNode> & node_list, const int32_t level);
  void recv_search(std::vector<int32_t> & _return);
  void verify(std::vector<int32_t> & _return, const std::string& D, const std::string& Kw);
  void send_verify(const std::string& D, const std::string& Kw);
  void recv_verify(std::vector<int32_t> & _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SSEServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<SSEServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SSEServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_add_entries(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_search(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verify(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SSEServiceProcessor(::std::shared_ptr<SSEServiceIf> iface) :
    iface_(iface) {
    processMap_["add_entries"] = &SSEServiceProcessor::process_add_entries;
    processMap_["search"] = &SSEServiceProcessor::process_search;
    processMap_["verify"] = &SSEServiceProcessor::process_verify;
  }

  virtual ~SSEServiceProcessor() {}
};

class SSEServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SSEServiceProcessorFactory(const ::std::shared_ptr< SSEServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< SSEServiceIfFactory > handlerFactory_;
};

class SSEServiceMultiface : virtual public SSEServiceIf {
 public:
  SSEServiceMultiface(std::vector<std::shared_ptr<SSEServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SSEServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<SSEServiceIf> > ifaces_;
  SSEServiceMultiface() {}
  void add(::std::shared_ptr<SSEServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void add_entries(const std::string& key, const std::string& val, const int32_t flag) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_entries(key, val, flag);
    }
    ifaces_[i]->add_entries(key, val, flag);
  }

  void search(std::vector<int32_t> & _return, const int32_t st, const std::string& Kw, const std::vector<SerialisedNode> & node_list, const int32_t level) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->search(_return, st, Kw, node_list, level);
    }
    ifaces_[i]->search(_return, st, Kw, node_list, level);
    return;
  }

  void verify(std::vector<int32_t> & _return, const std::string& D, const std::string& Kw) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verify(_return, D, Kw);
    }
    ifaces_[i]->verify(_return, D, Kw);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SSEServiceConcurrentClient : virtual public SSEServiceIf {
 public:
  SSEServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  SSEServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void add_entries(const std::string& key, const std::string& val, const int32_t flag);
  void send_add_entries(const std::string& key, const std::string& val, const int32_t flag);
  void search(std::vector<int32_t> & _return, const int32_t st, const std::string& Kw, const std::vector<SerialisedNode> & node_list, const int32_t level);
  int32_t send_search(const int32_t st, const std::string& Kw, const std::vector<SerialisedNode> & node_list, const int32_t level);
  void recv_search(std::vector<int32_t> & _return, const int32_t seqid);
  void verify(std::vector<int32_t> & _return, const std::string& D, const std::string& Kw);
  int32_t send_verify(const std::string& D, const std::string& Kw);
  void recv_verify(std::vector<int32_t> & _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
